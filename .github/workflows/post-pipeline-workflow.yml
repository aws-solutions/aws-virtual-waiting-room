name: Post Pipeline Workflow
on: 
  workflow_dispatch:
    inputs:
      pipeline_status:
        description: "Status of the AWS pipeline"
        required: true
        default: Unknown
        type: choice
        options:
          - Succeeded
          - Failed
          - Unknown
      pipeline_message:
        description: "Pipeline status details"
        default: "No detailed message"
        required: true
env:
  VERSION: ${{ secrets.VERSION }}
  REGION: us-east-1
  SHORT_NAME: VWR

jobs:
  process-notification:
    name: Process Notification
    runs-on: ubuntu-latest
    steps:
      - name: Get pipeline status
        run: |
          echo "Received pipeline_status: ${{ github.event.inputs.pipeline_status }}" 
          echo "Received pipeline_message: ${{ github.event.inputs.pipeline_message}}"
          if [ "${{ github.event.inputs.pipeline_status }}" = "Failed" ]; then
            exit 1
          fi

  create-update-tag-release:
    name: Create or update tag and release draft
    runs-on: ubuntu-latest
    # only run if it succeeded and it was the release pipeline
    if: ${{github.event.inputs.pipeline_status == 'Succeeded'}}
    steps:
      - name: Check Tags
        uses: actions/github-script@v5
        continue-on-error: true
        id: check_tags
        with:
          script: |
            const { VERSION } = process.env
            var found = true
            try {
              var output = await (github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${VERSION}`
              }))
            }
            catch {
              found = false
            }  
            return found
      - name: Update Release Draft
        id: update_draft
        if: ${{steps.check_tags.outputs.result == 'true'}}
        uses: actions/github-script@v5
        with:
          script: |
            const { VERSION, SHORT_NAME } = process.env
            var updated = false
            const releases = await(github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            }))
            console.log(releases)
            for (const rel of releases.data) {
              console.log(rel.id)
              if (rel.tag_name == `${VERSION}`) {
                console.log("matched tag")
                github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: `${VERSION}`,
                  release_id: rel.id,
                  name: `${SHORT_NAME} ${VERSION}`,
                  draft: true
                })
                updated = true
                break
              }
            }
            return updated
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Create or Update Version Tag
        id: create_tag
        # create a new tag since version tag wasn't found
        run: |
          git config --global user.email "me@example.com"
          git config --global user.name "sampleUser"
          git tag -f -a ${VERSION} -m "tagging for release"
          git push -f origin ${VERSION}
          echo "tag created"
      - name: Create Release Draft
        id: create_draft
        # tag doesn't exist or unable to update a release draft with matching tag
        if: ${{steps.check_tags.outputs.result == 'false' || steps.update_draft.outputs.result == 'false'}}
        uses: actions/github-script@v5
        with:
          script: |
            const { VERSION, SHORT_NAME } = process.env
            console.log("creating release draft")
              github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `${VERSION}`,
                name: `${SHORT_NAME} ${VERSION}`,
                draft: true,
                body: "Update this description with release notes, etc."
              })

  test-deploy-cfn:
    name: Deploy solution CFN for test
    runs-on: ubuntu-latest
    environment: test_release_env
    permissions:
      actions: read
      id-token: write
      contents: read
    # only run if it succeeded and it was the release pipeline
    if: ${{github.event.inputs.pipeline_status == 'Succeeded'}}
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Install required system packages
        run: |
          pip install --upgrade -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.TEST_RELEASE_ROLE }}
          aws-region: ${{ env.REGION }}
      - name: Test Release Template
        run: |
          export TEST_ENDPOINT=${{ secrets.TEST_ENDPOINT }}
          echo TEST_ENDPOINT=$TEST_ENDPOINT >> $GITHUB_ENV
          cd deployment
          python test-release.py
