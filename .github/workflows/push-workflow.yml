name: Push Workflow

# global environment variables to all jobs
env:
  REGION: us-east-1
  DIST_OUTPUT_BUCKET: sb-poc-solutions-features
  REGIONS_TO_DEPLOY: "us-west-2 us-east-1 eu-west-1"
  RELEASE_OUTPUT_BUCKET: sb-poc-solutions
  VERSION: ${{ secrets.VERSION }}
  RELEASE_BRANCH: main 

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"

jobs:
  trufflehog-scan-job:
    runs-on: ubuntu-latest
    name: Check source code with Trufflehog Scan
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: "--regex --entropy=False"
  
  bandit-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Bandit
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install bandit
        run: pip install bandit
      - name: Check source with bandit
        run: bandit -r source

  pylint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Pylint
    steps:
      # check out repo
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Pylint
      - name: Check with Pylint
        run: |
          pip install pylint
          cd source
          ./tools/pylint.sh

  jshint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with JShint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JShint
        run: npm install -g jshint
      - name: Check control panel with JShint
        run: |
          cd source/control-panel/src
          find . -name '*.js' -type f -print | \
            grep --invert-match "/node_modules/" | \
            xargs jshint
      - name: Check sample waiting site with JShint
        run: |
          cd source/sample-waiting-room-site/src
          find . -name '*.js' -type f -print | \
            grep --invert-match "/node_modules/" | \
            xargs jshint

  eslint-check-job:
      runs-on: ubuntu-latest
      name: Check source code with eslint
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Install eslint
          run: npm install eslint --save-dev
        - name: Install eslint vue plugin
          run: npm install eslint-plugin-vue@latest --save-dev
        - name: Check control panel with eslint
          run: npx eslint source/control-panel/src
        - name: Check sample waiting site with eslint
          run: npx eslint source/sample-waiting-room-site/src

  codeql-check-job:
    runs-on: ubuntu-latest
    name: Check source code with CodeQL
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  build-job:
    name: Run build script
    runs-on: ubuntu-latest
    needs:
      [
        trufflehog-scan-job,
        bandit-check-job,
        pylint-check-job,
        jshint-check-job,
        eslint-check-job,
        codeql-check-job
      ]
    # use a specific environment for this build that has secrets defined 
    # and protection rules in place, if needed
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up AWS environment 
        run: |
          export AWS_DEFAULT_REGION=${{ env.REGION }}
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
      - name: Update packages
        run: |
          sudo apt-get update
          pip install -U pip
      - name: Run safety check before build
        run: |
          pip install safety
          safety check -r deployment/requirements.txt
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Cache deployment directory
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run build script
        run: |
          cd deployment
          if [ $GITHUB_REF_NAME == $RELEASE_BRANCH ]; then
            ./build-s3-dist.sh $RELEASE_OUTPUT_BUCKET ${{ github.event.repository.name }} $VERSION
          else
            ./build-s3-dist.sh $DIST_OUTPUT_BUCKET ${{ github.event.repository.name }} $VERSION
          fi
      - name: Run unit tests
        run: |
          cd deployment
          ./run-unit-tests.sh

  pa11y-check-job:
    runs-on: ubuntu-latest
    needs:
      [
        build-job
      ]
    name: Check HTML code with Pa11y for accessibility
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Pa11y
        run: npm install -g pa11y
      - name: Check control panel with Pa11y
        run: |
          cd source/control-panel/src
          find . -iname '*.html' | xargs -I '{}' pa11y {}
      - name: Check sample waiting site with Pa11y
        run: |
          cd source/sample-waiting-room-site/src
          find . -iname '*.html' | xargs -I '{}' pa11y {}

  cfn-lint-job:
    name: Run cfn-lint on templates
    runs-on: ubuntu-latest
    needs:
      [
        build-job
      ]
    steps:
      - name: Install cfn-lint
        run: pip install cfn-lint
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run cfn-lint against templates
        run: |
          cd deployment/global-s3-assets
          cfn-lint *.template
  
  cfn-nag-job:
    name: Run cfn-nag on templates
    runs-on: ubuntu-latest
    needs:
      [
        build-job
      ]
    steps:
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run cfn-nag against templates
        uses: stelligent/cfn_nag@master
        with:
          input_path: deployment/global-s3-assets

  upload-and-store-job:
    name: Upload and store regional and global assets
    needs:
      [
        cfn-lint-job,
        cfn-nag-job,
        pa11y-check-job        
      ]
    runs-on: ubuntu-latest
    environment: push_env
    permissions:
      actions: read
      id-token: write
      contents: read
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.VWR_ROLE_ARN }}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 900
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Upload to S3
        # deploy to our test bucket if not doing a release
        if: ${{github.ref_name != env.RELEASE_BRANCH}}
        run: |
          cd deployment
          ./deploy.sh -b $DIST_OUTPUT_BUCKET -s ${{ github.event.repository.name }} -v $VERSION -r "$REGIONS_TO_DEPLOY" -a none
      - name: Zip up regional and global assets
        run: |
          cd deployment
          zip regional-s3-assets.zip regional-s3-assets/*
          zip global-s3-assets.zip global-s3-assets/*
      - name: Store zipped global and regional assets
        uses: actions/upload-artifact@v2
        with:
          name: zipped-regional-global-assets
          path: deployment/*.zip
